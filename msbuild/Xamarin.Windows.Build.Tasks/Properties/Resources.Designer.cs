//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Xamarin.Windows.Tasks.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Xamarin.Windows.Tasks.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #include &quot;platform.h&quot;
        ///
        ///// ${Defines}
        ///
        ///// ${AOTModules}
        ///// ${BundledAssemblies}
        ///// ${BundledAssemblyConfigs}
        ///// ${BundledAssemblyCleanups}
        ///
        ///#ifndef ROOT_DOMAIN_NAME
        ///#define ROOT_DOMAIN_NAME &quot;Mono&quot;
        ///#endif
        ///
        ///#ifndef RUNTIME_VERSION
        ///#define RUNTIME_VERSION NULL
        ///#endif
        ///
        ///int mono_launcher_initialize (int argc, char* argv[])
        ///{
        ///	return mono_launcher_platform_initialize (ROOT_DOMAIN_NAME, RUNTIME_VERSION,
        ///		argc, argv,
        ///		GET_AOT_MODULES, GET_BUNDLED_ASSEMBLIES,
        ///		GET_BUNDLED_ASSEMBLY_CONFIGS, GET_BUNDLED_ASSEMBLY_CLE [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string LauncherTemplate {
            get {
                return ResourceManager.GetString("LauncherTemplate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #include &lt;stdlib.h&gt;
        ///
        ///typedef struct {
        ///	const char *name;
        ///	const unsigned char *data;
        ///	const unsigned int size;
        ///} MonoBundledAssembly;
        ///
        ///typedef struct {
        ///	const char *name;
        ///	const char *data;
        ///} MonoBundledAssemblyConfig;
        ///
        ///typedef MonoBundledAssembly *(BundledAssemblyGetter)(void);
        ///typedef MonoBundledAssemblyConfig *(BundledAssemblyConfigGetter)(void);
        ///typedef void (BundledAssemblyCleanup) (void);
        ///
        ///#define BEGIN_DECLARE_AOT_MODULES                static void *_aot_modules[] = {
        ///#define DECLARE_AOT_MODULE(symbo [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PlatformHeader {
            get {
                return ResourceManager.GetString("PlatformHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #include &lt;stdint.h&gt;
        ///
        ///#include &quot;platform.h&quot;
        ///
        ///#define TRUE 1
        ///#define FALSE 0
        ///
        ///typedef int32_t gboolean;
        ///typedef struct _MonoAssembly MonoAssembly;
        ///typedef struct _MonoDomain MonoDomain;
        ///typedef enum { MONO_IMAGE_OK } MonoImageOpenStatus;
        ///
        ///extern void mono_jit_set_aot_only (gboolean val);
        ///extern void mono_aot_register_module (void *aot_info);
        ///extern void mono_register_bundled_assemblies (const MonoBundledAssembly **assemblies);
        ///extern void mono_register_config_for_assembly (const char* assembly_name, const cha [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PlatformImpl {
            get {
                return ResourceManager.GetString("PlatformImpl", resourceCulture);
            }
        }
    }
}
