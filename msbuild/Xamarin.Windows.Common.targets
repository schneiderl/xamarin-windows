<!--
***********************************************************************************************
Xamarin.Windows.Common.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
  created a backup copy.  Incorrect changes to this file will make it
  impossible to load or build your projects from the command-line or the IDE.

This file imports the version- and platform-specific targets for the project importing
this file. This file also defines targets to produce an error if the specified targets
file does not exist, but the project is built anyway (command-line or IDE build).

Copyright (C) Microsoft Corporation. All rights reserved.
***********************************************************************************************
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <XamarinWindowsBuildTasksPath Condition="!Exists('$(MSBuildThisFileDirectory)Xamarin.Windows.Build.Tasks.dll')">Xamarin.Windows.Build.Tasks\bin\$(Configuration)\</XamarinWindowsBuildTasksPath>
  </PropertyGroup>

  <UsingTask TaskName="Xamarin.Windows.Tasks.ResolveAssemblies" AssemblyFile="$(XamarinWindowsBuildTasksPath)Xamarin.Windows.Build.Tasks.dll"/>
  <UsingTask TaskName="Xamarin.Windows.Tasks.Aot" AssemblyFile="$(XamarinWindowsBuildTasksPath)Xamarin.Windows.Build.Tasks.dll"/>
  <UsingTask TaskName="Xamarin.Windows.Tasks.ConvertDebuggingFiles" AssemblyFile="$(XamarinWindowsBuildTasksPath)Xamarin.Windows.Build.Tasks.dll"/>
  <UsingTask TaskName="Xamarin.Windows.Tasks.GenerateLauncher" AssemblyFile="$(XamarinWindowsBuildTasksPath)Xamarin.Windows.Build.Tasks.dll"/>
  <UsingTask TaskName="Xamarin.Windows.Tasks.GenerateBundledAssemblies" AssemblyFile="$(XamarinWindowsBuildTasksPath)Xamarin.Windows.Build.Tasks.dll"/>
  <UsingTask TaskName="Xamarin.Windows.Tasks.ExtractItems" AssemblyFile="$(XamarinWindowsBuildTasksPath)Xamarin.Windows.Build.Tasks.dll"/>

  <!--
  *******************************************
    Extensibility hook that allows VS to
    provide extra behavior without modifying 
    the core targets.
  *******************************************
  -->
  <Import Project="$(MSBuildThisFileDirectory)$(MSBuildThisFileName).Before.targets" 
          Condition="Exists('$(MSBuildThisFileDirectory)$(MSBuildThisFileName).Before.targets')"/>

  <!-- Defaults -->
  <PropertyGroup>
    <OverrideTargetFramework>false</OverrideTargetFramework>
    <AssemblySearchPaths>$([System.String]::Copy('$(AssemblySearchPaths)').Replace('{GAC}',''))</AssemblySearchPaths>
    <AssemblySearchPaths Condition="'$(MSBuildRuntimeVersion)' != ''">$(AssemblySearchPaths.Split(';'))</AssemblySearchPaths>
    <TargetFrameworkIdentifier>Xamarin.Windows</TargetFrameworkIdentifier>
    <GenerateDebuggableAotModules Condition=" '$(GenerateDebuggableAotModules)' == '' And $(Configuration.Contains('Debug')) ">True</GenerateDebuggableAotModules>
    <AotOutputFileType Condition="'$(AotOutputFileType)' == ''"></AotOutputFileType> <!-- Aot task defaults to Obj -->
    <AotOutputFileExtension Condition="'$(AotOutputFileExtension)' == ''"></AotOutputFileExtension> <!-- Aot task defaults to .obj/.s/.dll depending on AotOutputFileType value -->
    <LauncherFileName Condition="'$(LauncherFileName)' == ''"></LauncherFileName> <!-- Use GenerateLauncher task's default -->
    <UseCustomPlatformImpl Condition="'$(UseCustomPlatformImpl)' == ''">False</UseCustomPlatformImpl>
  </PropertyGroup>

  <!-- Allows to use the BCL and toolchain from a Mono dev root -->
  <PropertyGroup Condition="'$(MonoDevRoot)' != ''">
    <_TargetFrameworkDirectory>$(MonoDevRoot)\mcs\class\lib\winaot;$(MonoDevRoot)\mcs\class\lib\winaot\Facades</_TargetFrameworkDirectory>
    <MonoDevConfiguration Condition="'$(MonoDevConfiguration)' == ''">Release</MonoDevConfiguration>
    <AotCompilerPlatform Condition="'$(AotCompilerPlatform)' == ''">x64</AotCompilerPlatform>
    <AotCompilerPath Condition="'$(AotCompilerPath)' == ''">$(MonoDevRoot)\msvc\build\sgen\$(AotCompilerPlatform)\bin\$(MonoDevConfiguration)\mono-sgen.exe</AotCompilerPath>
    <MonoLibsPath Condition="'$(MonoLibsPath)' == ''">$(MonoDevRoot)\msvc\build\sgen\$(AotCompilerPlatform)\lib\$(MonoDevConfiguration)\</MonoLibsPath>
    <OverrideTargetFramework>true</OverrideTargetFramework>
  </PropertyGroup>

  <!-- Directories and files -->
  <PropertyGroup>
    <_XWIntermediateOutputPath>$(IntermediateOutputPath)XW\</_XWIntermediateOutputPath>
    <_XWAotOutputDirectory>$(_XWIntermediateOutputPath)Aot\</_XWAotOutputDirectory>
    <_XWGeneratedCodeOutputDirectory>$(_XWIntermediateOutputPath)Gen\</_XWGeneratedCodeOutputDirectory>
    <_XWIntermediateAssembliesDirectory>$(_XWIntermediateOutputPath)Assem\</_XWIntermediateAssembliesDirectory>
    <_XWIntermediateNativeOutputDirectory>$(_XWIntermediateOutputPath)Native\</_XWIntermediateNativeOutputDirectory>
    <_XWNativeExeOutputDirectory>$(OutputPath)Native\</_XWNativeExeOutputDirectory>
    <_XWNativeProjectName>$(TargetName)</_XWNativeProjectName>
    <_XWNativeProjectFile>$(_XWIntermediateOutputPath)$(_XWNativeProjectName).vcxproj</_XWNativeProjectFile>
    <_XWNativeProjectPropsFile>$(_XWIntermediateOutputPath)$(_XWNativeProjectName).props</_XWNativeProjectPropsFile>
    <_XWExtractedItemsFile>$(_XWIntermediateOutputPath)$(_XWNativeProjectName).items</_XWExtractedItemsFile>
  </PropertyGroup>

  <PropertyGroup>
    <VS15Install Condition="'$(VS15Install)' == ''">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\VisualStudio\SxS\VS7@15.0)</VS15Install>
    <VS15Install Condition="'$(VS15Install)' == ''">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\SxS\VS7@15.0)</VS15Install>

    <VS14Install Condition="'$(VS14Install)' == ''">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\VisualStudio\SxS\VS7@14.0)</VS14Install>
    <VS14Install Condition="'$(VS14Install)' == ''">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\SxS\VS7@14.0)</VS14Install>
    <VS14Install Condition="'$(VS14Install)' == '' And Exists('$(VS140COMNTOOLS)')">$([System.IO.Directory]::GetParent("$(VS140COMNTOOLS)").Parent.Parent.FullName)\</VS14Install> 
  </PropertyGroup>

  <Import Project="$(VS15Install)VC\Auxiliary\Build\Microsoft.ClangC2Version.default.props" Condition="Exists('$(VS15Install)VC\Auxiliary\Build\Microsoft.ClangC2Version.default.props')" />

  <!-- Toolchain setup -->
  <PropertyGroup>
    <AotCompilerPlatform Condition="'$(AotCompilerPlatform)' == ''">x64</AotCompilerPlatform>
    <AotCompilerConfiguration Condition="'$(AotCompilerConfiguration)' == ''">Release</AotCompilerConfiguration>
    <AotCompilerPath Condition="'$(AotCompilerPath)' == ''">$(MSBuildThisFileDirectory)$(AotCompilerPlatform)\$(AotCompilerConfiguration)\mono-sgen.exe</AotCompilerPath>
    <NativeToolchainPaths Condition="'$(NativeToolchainPaths)' == '' And '$(VisualStudioVersion)' == '15.0'">$(VS15Install)VC\Tools\ClangC2\$(ClangC2Version)\bin\HostX64</NativeToolchainPaths>
    <NativeToolchainPaths Condition="'$(NativeToolchainPaths)' == '' And '$(VisualStudioVersion)' == '14.0'">$(VS14Install)VC\ClangC2\bin\amd64</NativeToolchainPaths>
    <NativeBuildConfiguration Condition="'$(NativeBuildConfiguration)' == ''">Release</NativeBuildConfiguration>
    <MonoLibsPath Condition="'$(MonoLibsPath)' == ''">$(MSBuildThisFileDirectory)$(AotCompilerPlatform)\$(AotCompilerConfiguration)\</MonoLibsPath>
  </PropertyGroup>

  <!-- When looking for related files to copy, look for Mono debugging files as well -->
  <PropertyGroup>
    <AllowedReferenceRelatedFileExtensions>
      $(AllowedReferenceRelatedFileExtensions);
      .dll.mdb;
      .exe.mdb
    </AllowedReferenceRelatedFileExtensions>
  </PropertyGroup>

  <PropertyGroup>
    <GetReferenceAssemblyPathsDependsOn>
      _SetTargetFrameworkDirectory;
      $(GetReferenceAssemblyPathsDependsOn);
    </GetReferenceAssemblyPathsDependsOn>
    <ResolveAssemblyReferencesDependsOn>
      _FixupMSCorlibReference;
      $(ResolveAssemblyReferencesDependsOn);
    </ResolveAssemblyReferencesDependsOn>
    <CleanDependsOn>
      $(CleanDependsOn);
      _CleanXamarinWindowsOutputs;
    </CleanDependsOn>
  </PropertyGroup>

  <PropertyGroup>
    <BuildDependsOn>
      $(BuildDependsOn);
      _ConvertPdbFiles;
    </BuildDependsOn>
  </PropertyGroup>

  <PropertyGroup Condition="'$(OutputType)' == 'Exe'">
    <BuildNativeDependsOn>
      Build;
      BuildNative;
    </BuildNativeDependsOn>
  </PropertyGroup>

  <!-- Microsoft.CSharp.Targets adds the .NET mscorlib.dll to _ExplicitReference.
       Here we remove it and make sure @(Reference) contains mscorlib instead. -->
  <Target Name="_FixupMSCorlibReference">
    <PropertyGroup>
      <AllReferences>@(Reference)</AllReferences>
    </PropertyGroup>
    <ItemGroup>
      <_ExplicitReference Remove="$(FrameworkPathOverride)\mscorlib.dll" />
      <Reference Include="mscorlib" Condition="!$(AllReferences.Contains('mscorlib'))"/>
    </ItemGroup>
  </Target>

  <Target Name="_SetTargetFrameworkDirectory">
    <PropertyGroup>
      <TargetFrameworkDirectory Condition="'$(_TargetFrameworkDirectory)' != ''">$(_TargetFrameworkDirectory)</TargetFrameworkDirectory>
      <TargetFrameworkMoniker Condition="!$(OverrideTargetFramework)">$(TargetFrameworkIdentifier),Version=1.0</TargetFrameworkMoniker>
      <TargetFrameworkMoniker Condition="$(OverrideTargetFramework)"></TargetFrameworkMoniker>
    </PropertyGroup>
  </Target>

  <Target Name="_ResolveAssemblies" DependsOnTargets="GetReferenceAssemblyPaths">
    <!--- Remove the ImplicitlyExpandDesignTimeFacades assemblies. We have already build the app there are not required for packaging  -->
    <ItemGroup>
      <FilteredAssemblies Include="@(ReferencePath)" Condition="'%(ReferencePath.ResolvedFrom)' != 'ImplicitlyExpandDesignTimeFacades'" />
    </ItemGroup>
    <!-- Find all the assemblies this app requires -->
    <ResolveAssemblies
      Assemblies="$(OutDir)$(TargetFileName);@(FilteredAssemblies)"
      I18nAssemblies="$(I18nAssemblies)"
      ReferenceAssembliesDirectory="$(TargetFrameworkDirectory)">
        <Output TaskParameter="ResolvedAssemblies" ItemName="ResolvedAssemblies" />
        <Output TaskParameter="ResolvedUserAssemblies" ItemName="ResolvedUserAssemblies" />
        <Output TaskParameter="ResolvedFrameworkAssemblies" ItemName="ResolvedFrameworkAssemblies" />
        <Output TaskParameter="ResolvedPdbFiles" ItemName="ResolvedPdbFiles" />
        <Output TaskParameter="ResolvedMdbFiles" ItemName="ResolvedMdbFiles" />
        <Output TaskParameter="ResolvedConfigFiles" ItemName="ResolvedConfigFiles" />
    </ResolveAssemblies>
  </Target>

  <Target Name="_CollectAssemblies" DependsOnTargets="_ResolveAssemblies">
    <Copy SourceFiles="@(ResolvedAssemblies)" DestinationFolder="$(_XWIntermediateAssembliesDirectory)" SkipUnchangedFiles="true"/>
    <Copy SourceFiles="@(ResolvedPdbFiles)" DestinationFolder="$(_XWIntermediateAssembliesDirectory)" SkipUnchangedFiles="true"/>
    <Copy SourceFiles="@(ResolvedMdbFiles)" DestinationFolder="$(_XWIntermediateAssembliesDirectory)" SkipUnchangedFiles="true"/>
    <Copy SourceFiles="@(ResolvedConfigFiles)" DestinationFolder="$(_XWIntermediateAssembliesDirectory)" SkipUnchangedFiles="false"/>
    <Copy SourceFiles="@(ResolvedAssemblies -> '$(OutputPath)%(Filename)%(Extension).config')" DestinationFolder="$(_XWIntermediateAssembliesDirectory)"
          SkipUnchangedFiles="false" Condition="Exists('$(OutputPath)%(Filename)%(Extension).config')"/>
    <ItemGroup>
      <CollectedUserAssemblies Include="@(ResolvedUserAssemblies -> '$(_XWIntermediateAssembliesDirectory)%(Filename)%(Extension)')"/>
      <CollectedFrameworkAssemblies Include="@(ResolvedFrameworkAssemblies -> '$(_XWIntermediateAssembliesDirectory)%(Filename)%(Extension)')"/>
      <CollectedPdbFiles Include="@(ResolvedPdbFiles -> '$(_XWIntermediateAssembliesDirectory)%(Filename)%(Extension)')"/>
      <CollectedMdbFiles Include="@(ResolvedMdbFiles -> '$(_XWIntermediateAssembliesDirectory)%(Filename)%(Extension)')"/>
      <CollectedConfigFiles Include="@(ResolvedAssemblies -> '$(_XWIntermediateAssembliesDirectory)%(Filename)%(Extension).config')" Condition="Exists('$(_XWIntermediateAssembliesDirectory)%(Filename)%(Extension).config')"/>
      <CollectedAssemblies Include="@(CollectedUserAssemblies)"/>
      <CollectedAssemblies Include="@(CollectedFrameworkAssemblies)"/>
    </ItemGroup>
  </Target>

  <Target Name="_ConvertPdbFiles" DependsOnTargets="_CollectAssemblies">
    <ConvertDebuggingFiles Files="@(CollectedPdbFiles)">
      <Output TaskParameter="MdbFiles" ItemName="ConvertedMdbFiles" />
      <Output TaskParameter="PPdbFiles" ItemName="CollectedPPdbFiles" />
    </ConvertDebuggingFiles>
  </Target>

  <Target Name="_AotCompileAssemblies" DependsOnTargets="_CollectAssemblies">
    <Aot AotCompilerPath="$(AotCompilerPath)"
         NativeToolchainPaths="$(NativeToolchainPaths)" NativeToolsPrefix="$(NativeToolsPrefix)" NativeLinkerFlags="$(NativeLinkerFlags)"
         ResolvedFrameworkAssemblies="@(CollectedFrameworkAssemblies)" ResolvedUserAssemblies="@(CollectedUserAssemblies)"
         AotOutputDirectory="$(_XWAotOutputDirectory)" 
         IntermediateAssemblyDirectory="$(_XWIntermediateAssembliesDirectory)" IsDebug="$(GenerateDebuggableAotModules)" 
         GenerateNativeDebugInfo="$(GenerateNativeDebugInfo)" OutputFileType="$(AotOutputFileType)" OutputFileExtension="$(AotOutputFileExtension)">
      <Output TaskParameter="GeneratedFiles" ItemName="GeneratedAotFiles" />
    </Aot>
  </Target>

  <Target Name="_GenerateLauncher" DependsOnTargets="_CollectAssemblies">
    <GenerateLauncher AotAssemblies="@(CollectedAssemblies)" BundledAssemblies="@(CollectedAssemblies)"
        OutputDirectory="$(_XWGeneratedCodeOutputDirectory)" LauncherFileName="$(LauncherFileName)"
        UseCustomPlatformImpl="$(UseCustomPlatformImpl)">
      <Output TaskParameter="GeneratedFiles" ItemName="GeneratedSourceFiles" />
    </GenerateLauncher>
  </Target>

  <Target Name="_GenerateBundledAssemblies" DependsOnTargets="_CollectAssemblies">
    <GenerateBundledAssemblies Assemblies="@(CollectedAssemblies)" ConfigFiles="@(CollectedConfigFiles)" OutputDirectory="$(_XWGeneratedCodeOutputDirectory)">
      <Output TaskParameter="GeneratedFiles" ItemName="GeneratedSourceFiles" />
      <Output TaskParameter="BundledConfigFiles" ItemName="BundledConfigFiles" />
    </GenerateBundledAssemblies>
  </Target>

  <Target Name="_PrepareNative" DependsOnTargets="_AotCompileAssemblies;_GenerateLauncher;_GenerateBundledAssemblies">
    <ItemGroup>
      <_ClCompile Include="@(GeneratedSourceFiles)" Condition="'%(Extension)' != '.h'"/>
      <_Object Include="@(GeneratedAotFiles)"/>
    </ItemGroup>
    <PropertyGroup>
      <_XWAdditionalDependencies>Mswsock.lib%3Bws2_32.lib%3Bole32.lib%3Boleaut32.lib%3Bpsapi.lib%3Bversion.lib%3Badvapi32.lib%3Bwinmm.lib%3Bkernel32.lib%3Blibmonoruntime-sgen.lib%3Beglib.lib%3Blibgcmonosgen.lib%3Blibmono-static-sgen.lib%3Blibmonoutils.lib</_XWAdditionalDependencies>
      <_XWAdditionalLibraryDirectories>$(MonoLibsPath)</_XWAdditionalLibraryDirectories>
    </PropertyGroup>
    <ItemGroup>
      <_None Include="@(CollectedAssemblies)">
        <Link>%(Filename)%(Extension)</Link>
        <DeploymentContent>true</DeploymentContent>
      </_None>
      <_None Include="@(CollectedMdbFiles)">
        <Link>%(Filename)%(Extension)</Link>
        <DeploymentContent>true</DeploymentContent>
      </_None>
      <_None Include="@(ConvertedMdbFiles)">
        <Link>%(Filename)%(Extension)</Link>
        <DeploymentContent>true</DeploymentContent>
      </_None>
      <_None Include="@(CollectedPPdbFiles)">
        <Link>%(Filename)%(Extension)</Link>
        <DeploymentContent>true</DeploymentContent>
      </_None>
    </ItemGroup>
    <Delete Files="$(_XWExtractedItemsFile)" Condition="Exists('$(_XWExtractedItemsFile)')"/>  
    <ExtractItems Items="@(Content)" ItemType="Content" Output="$(_XWExtractedItemsFile)"/>
    <ExtractItems Items="@(_ClCompile)" ItemType="ClCompile" Output="$(_XWExtractedItemsFile)"/>
    <ExtractItems Items="@(_Object)" ItemType="Object" Output="$(_XWExtractedItemsFile)"/>
    <ExtractItems Items="@(_Library)" ItemType="Library" Output="$(_XWExtractedItemsFile)"/>
    <ExtractItems Items="@(_None)" ItemType="None" Output="$(_XWExtractedItemsFile)"/>
  </Target>

  <Target Name="_BuildNative" DependsOnTargets="_PrepareNative">
    <PropertyGroup>
      <_XWCurrentDir>$([System.IO.Path]::GetFullPath('.'))\</_XWCurrentDir>
    </PropertyGroup>
    <ItemGroup>
      <_XWNativeProjectPropsLines Include="&lt;Project xmlns=&quot;http://schemas.microsoft.com/developer/msbuild/2003&quot;&gt;"/>
      <_XWNativeProjectPropsLines Include="  &lt;PropertyGroup&gt;"/>
      <_XWNativeProjectPropsLines Include="    &lt;OutDir&gt;$(_XWCurrentDir)$(_XWNativeExeOutputDirectory)&lt;/OutDir&gt;"/>
      <_XWNativeProjectPropsLines Include="    &lt;IntDir&gt;$(_XWCurrentDir)$(_XWIntermediateNativeOutputDirectory)&lt;/IntDir&gt;"/>
      <_XWNativeProjectPropsLines Include="    &lt;XWAdditionalDependencies&gt;$(_XWAdditionalDependencies)&lt;/XWAdditionalDependencies&gt;"/>
      <_XWNativeProjectPropsLines Include="    &lt;XWBuildConfiguration&gt;$(NativeBuildConfiguration)&lt;/XWBuildConfiguration&gt;"/>
      <_XWNativeProjectPropsLines Include="  &lt;/PropertyGroup&gt;"/>
      <_XWNativeProjectPropsLines Include="  &lt;ItemDefinitionGroup&gt;"/>
      <_XWNativeProjectPropsLines Include="    &lt;Link&gt;"/>
      <_XWNativeProjectPropsLines Include="      &lt;AdditionalLibraryDirectories&gt;$(_XWAdditionalLibraryDirectories)&lt;/AdditionalLibraryDirectories&gt;"/>
      <_XWNativeProjectPropsLines Include="    &lt;/Link&gt;"/>
      <_XWNativeProjectPropsLines Include="  &lt;/ItemDefinitionGroup&gt;"/>
      <_XWNativeProjectPropsLines Include="&lt;/Project&gt;"/>
    </ItemGroup>
    <WriteLinesToFile File="$(_XWNativeProjectPropsFile)" Lines="@(_XWNativeProjectPropsLines)" Overwrite="true" Encoding="Unicode"/>
    <Copy SourceFiles="$(MSBuildThisFileDirectory)GenericNativeWindowsExecutable.vcxproj" DestinationFiles="$(_XWNativeProjectFile)" SkipUnchangedFiles="true"/>
    <MSBuild Projects="$(_XWNativeProjectFile)" Properties="Configuration=$(NativeBuildConfiguration);Platform=$(AotCompilerPlatform)"/>
  </Target>

  <Target Name="BuildNative" DependsOnTargets="$(BuildNativeDependsOn)"/> 

  <Target Name="_CleanXamarinWindowsOutputs">
    <RemoveDir Directories="$(_XWIntermediateOutputPath);$(_XWNativeExeOutputDirectory)" />  
  </Target>

  <!--
  *******************************************
    Extensibility hook that allows VS to
    provide extra behavior without modifying 
    the core targets.
  *******************************************
  -->
  <Import Project="$(MSBuildThisFileDirectory)$(MSBuildThisFileName).After.targets" 
          Condition="Exists('$(MSBuildThisFileDirectory)$(MSBuildThisFileName).After.targets')"/>

</Project>
